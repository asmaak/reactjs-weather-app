{"version":3,"sources":["components/Weather/Weather.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","temperature","city","country","humidity","description","error","Form","onSubmit","getWeather","type","name","placeholder","API_KEY","App","state","e","a","preventDefault","target","elements","value","console","log","fetch","api","json","data","setState","main","temp","sys","weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oOAmBeA,EAjBA,SAACC,GAEZ,OACE,yBAAKC,UAAU,QACZD,EAAME,aAAe,uBAAGD,UAAU,YAAb,iBAAsC,0BAAMA,UAAU,cAAcD,EAAME,cAC/FF,EAAMG,MAAO,uBAAGF,UAAU,YAAb,UAA+B,0BAAMA,UAAU,cAAcD,EAAMG,OAC/EH,EAAMI,SAAU,uBAAGH,UAAU,YAAb,aAAkC,0BAAMA,UAAU,cAAcD,EAAMI,UACtFJ,EAAMK,UAAW,uBAAGJ,UAAU,YAAb,aAAkC,0BAAMA,UAAU,cAAhB,IAA+BD,EAAMK,WACxFL,EAAMM,aAAc,uBAAGL,UAAU,YAAb,iBAAsC,0BAAMA,UAAU,cAAcD,EAAMM,cAC9FN,EAAMO,OAAQ,uBAAGN,UAAU,YAAb,UAA+B,0BAAMA,UAAU,cAAeD,EAAMO,UCQ7EC,EAjBF,SAACR,GAEV,OACE,6BACC,0BAAMS,SAAUT,EAAMU,YAClB,2BAAOC,KAAK,OAAOC,KAAK,UAAWC,YAAY,gBAC/C,2BAAOF,KAAK,OAAOC,KAAK,OAAOC,YAAY,aAC3C,4BAAQF,KAAK,UAAb,kBCLLG,EAAQ,mCA+DCC,E,4MA5DbC,MAAO,CACLd,YAAY,GACZC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAERG,W,uCAAa,WAAOO,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIhB,EAAKc,EAAEG,OAAOC,SAASlB,KAAKmB,MAC5BlB,EAAQa,EAAEG,OAAOC,SAASjB,QAAQkB,MAExCC,QAAQC,IAAIrB,GALD,SAMMsB,MAAM,qDAAD,OAAsDtB,EAAtD,YAA8DC,EAA9D,kBAA+EU,IAN1F,cAMNY,EANM,gBAOOA,EAAIC,OAPX,OAONC,EAPM,OASZL,QAAQC,IAAII,GACTzB,GAAQC,EACV,EAAKyB,SAAS,CACZ3B,YAAY0B,EAAKE,KAAKC,KACtB5B,KAAKyB,EAAKhB,KACVR,QAAQwB,EAAKI,IAAI5B,QACjBC,SAASuB,EAAKE,KAAKzB,SACnBC,YAAYsB,EAAKK,QAAQ,GAAG3B,YAC5BC,MAAM,KAGR,EAAKsB,SAAS,CACZ3B,YAAY,GACdC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,sBAIPgB,QAAQC,IAAI,EAAKR,OA9BL,4C,6GAiCX,OACE,yBAAKf,UAAU,WACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAMS,WAAYwB,KAAKxB,aAC7B,kBAAC,EAAD,CAASR,YAAagC,KAAKlB,MAAMd,YACxBC,KAAM+B,KAAKlB,MAAMb,KACjBC,QAAS8B,KAAKlB,MAAMZ,QACpBC,SAAU6B,KAAKlB,MAAMX,SACrBC,YAAa4B,KAAKlB,MAAMV,YACxBC,MAAO2B,KAAKlB,MAAMT,c,GAnDb4B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACLgB,QAAQhB,MAAMA,EAAM8C,a","file":"static/js/main.7e01e4a6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather =(props) =>{\r\n  \r\n    return (\r\n      <div className=\"info\">\r\n        {props.temperature && <p className=\"info_key\">Temperature : <span className=\"info_value\">{props.temperature}</span></p>}\r\n        {props.city &&<p className=\"info_key\">City : <span className=\"info_value\">{props.city}</span></p>}\r\n         {props.country &&<p className=\"info_key\">Country : <span className=\"info_value\">{props.country}</span></p>}\r\n         {props.humidity &&<p className=\"info_key\">Humidity :<span className=\"info_value\"> {props.humidity}</span></p>}\r\n         {props.description &&<p className=\"info_key\">Description : <span className=\"info_value\">{props.description}</span></p>}\r\n         {props.error &&<p className=\"info_key\">Error :<span className=\"info_value\" >{props.error}</span></p>}\r\n       </div>\r\n    );\r\n  \r\n\r\n}\r\n\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\n\r\nconst Form = (props) =>{\r\n \r\n    return (\r\n      <div >\r\n       <form onSubmit={props.getWeather}>\r\n           <input type=\"text\" name=\"country\"  placeholder=\"Country ...\"/>\r\n           <input type=\"text\" name=\"city\" placeholder=\"City ...\"/>\r\n           <button type=\"submit\">Get Weather</button>\r\n\r\n        </form>\r\n      </div>\r\n    );\r\n  \r\n\r\n}\r\n\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\nimport Weather from './components/Weather/Weather';\nimport Form from './components/Form/Form';\n\nconst API_KEY=\"deb0a009a35ca4c5bc23fb5239627ffa\";\n// http://api.openweathermap.org/data/2.5/weather?q=cairo,egypt&appid=deb0a009a35ca4c5bc23fb5239627ffa\nclass App extends Component{\n  state ={\n    temperature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:''\n  }\n  getWeather = async (e) =>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n\n    console.log(city);\n   const api = await fetch(` http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n   const data = await api.json();\n\n   console.log(data);\n   if(city && country){\n    this.setState({\n      temperature:data.main.temp,\n      city:data.name,\n      country:data.sys.country,\n      humidity:data.main.humidity,\n      description:data.weather[0].description,\n      error:''\n     });\n   }else{\n    this.setState({\n      temperature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:'Please Enter Data'\n     });\n   }\n  \n   console.log(this.state)\n  }\n  render(){\n    return (\n      <div className=\"wrapper\">\n        <div className=\"form-container\">\n          <Form getWeather={this.getWeather}/>\n    <Weather temperature={this.state.temperature} \n             city={this.state.city}\n             country={this.state.country}\n             humidity={this.state.humidity}\n             description={this.state.description}\n             error={this.state.error}\n    />\n    </div>\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}